/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Todos API
 * API for managing todos
 * OpenAPI spec version: 1.0.0
 */
import { createMutation, createQuery } from '@tanstack/svelte-query';
import type {
	CreateMutationOptions,
	CreateMutationResult,
	CreateQueryOptions,
	CreateQueryResult,
	DataTag,
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey
} from '@tanstack/svelte-query';

import type {
	DeleteApiV1TodosById404,
	GetApiV1Todos200Item,
	GetApiV1Todos404,
	GetApiV1TodosById200,
	GetApiV1TodosById404,
	GetApiV1TodosParams,
	PatchApiV1TodosById200,
	PatchApiV1TodosById404,
	PatchApiV1TodosByIdBody,
	PostApiV1Todos201,
	PostApiV1TodosBody
} from './todos.schemas';

import { todosCustomFetch } from './todos-custom-fetch';

/**
 * Get all todos
 */
export const getApiV1Todos = (params?: GetApiV1TodosParams, signal?: AbortSignal) => {
	return todosCustomFetch<GetApiV1Todos200Item[]>({
		url: 'http://localhost:4001/api/v1/todos',
		method: 'GET',
		params,
		signal
	});
};

export const getGetApiV1TodosQueryKey = (params?: GetApiV1TodosParams) => {
	return ['http://localhost:4001/api/v1/todos', ...(params ? [params] : [])] as const;
};

export const getGetApiV1TodosQueryOptions = <
	TData = Awaited<ReturnType<typeof getApiV1Todos>>,
	TError = GetApiV1Todos404
>(
	params?: GetApiV1TodosParams,
	options?: {
		query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof getApiV1Todos>>, TError, TData>>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetApiV1TodosQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Todos>>> = ({ signal }) =>
		getApiV1Todos(params, signal);

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof getApiV1Todos>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiV1TodosQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1Todos>>>;
export type GetApiV1TodosQueryError = GetApiV1Todos404;

export function createGetApiV1Todos<
	TData = Awaited<ReturnType<typeof getApiV1Todos>>,
	TError = GetApiV1Todos404
>(
	params?: GetApiV1TodosParams,
	options?: {
		query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof getApiV1Todos>>, TError, TData>>;
	},
	queryClient?: QueryClient
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetApiV1TodosQueryOptions(params, options);

	const query = createQuery(queryOptions, queryClient) as CreateQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * Create a new todo
 */
export const postApiV1Todos = (postApiV1TodosBody: PostApiV1TodosBody, signal?: AbortSignal) => {
	return todosCustomFetch<PostApiV1Todos201>({
		url: 'http://localhost:4001/api/v1/todos',
		method: 'POST',
		headers: { 'Content-Type': 'application/json' },
		data: postApiV1TodosBody,
		signal
	});
};

export const getPostApiV1TodosMutationOptions = <TError = unknown, TContext = unknown>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof postApiV1Todos>>,
		TError,
		{ data: PostApiV1TodosBody },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof postApiV1Todos>>,
	TError,
	{ data: PostApiV1TodosBody },
	TContext
> => {
	const mutationKey = ['postApiV1Todos'];
	const { mutation: mutationOptions } = options
		? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof postApiV1Todos>>,
		{ data: PostApiV1TodosBody }
	> = (props) => {
		const { data } = props ?? {};

		return postApiV1Todos(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type PostApiV1TodosMutationResult = NonNullable<Awaited<ReturnType<typeof postApiV1Todos>>>;
export type PostApiV1TodosMutationBody = PostApiV1TodosBody;
export type PostApiV1TodosMutationError = unknown;

export const createPostApiV1Todos = <TError = unknown, TContext = unknown>(
	options?: {
		mutation?: CreateMutationOptions<
			Awaited<ReturnType<typeof postApiV1Todos>>,
			TError,
			{ data: PostApiV1TodosBody },
			TContext
		>;
	},
	queryClient?: QueryClient
): CreateMutationResult<
	Awaited<ReturnType<typeof postApiV1Todos>>,
	TError,
	{ data: PostApiV1TodosBody },
	TContext
> => {
	const mutationOptions = getPostApiV1TodosMutationOptions(options);

	return createMutation(mutationOptions, queryClient);
};

/**
 * Get a todo by id
 */
export const getApiV1TodosById = (id: string, signal?: AbortSignal) => {
	return todosCustomFetch<GetApiV1TodosById200>({
		url: `http://localhost:4001/api/v1/todos/${id}`,
		method: 'GET',
		signal
	});
};

export const getGetApiV1TodosByIdQueryKey = (id: string) => {
	return [`http://localhost:4001/api/v1/todos/${id}`] as const;
};

export const getGetApiV1TodosByIdQueryOptions = <
	TData = Awaited<ReturnType<typeof getApiV1TodosById>>,
	TError = GetApiV1TodosById404
>(
	id: string,
	options?: {
		query?: Partial<
			CreateQueryOptions<Awaited<ReturnType<typeof getApiV1TodosById>>, TError, TData>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetApiV1TodosByIdQueryKey(id);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1TodosById>>> = ({ signal }) =>
		getApiV1TodosById(id, signal);

	return { queryKey, queryFn, enabled: !!id, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof getApiV1TodosById>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiV1TodosByIdQueryResult = NonNullable<
	Awaited<ReturnType<typeof getApiV1TodosById>>
>;
export type GetApiV1TodosByIdQueryError = GetApiV1TodosById404;

export function createGetApiV1TodosById<
	TData = Awaited<ReturnType<typeof getApiV1TodosById>>,
	TError = GetApiV1TodosById404
>(
	id: string,
	options?: {
		query?: Partial<
			CreateQueryOptions<Awaited<ReturnType<typeof getApiV1TodosById>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetApiV1TodosByIdQueryOptions(id, options);

	const query = createQuery(queryOptions, queryClient) as CreateQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * Update a todo by id
 */
export const patchApiV1TodosById = (
	id: string,
	patchApiV1TodosByIdBody: PatchApiV1TodosByIdBody
) => {
	return todosCustomFetch<PatchApiV1TodosById200>({
		url: `http://localhost:4001/api/v1/todos/${id}`,
		method: 'PATCH',
		headers: { 'Content-Type': 'application/json' },
		data: patchApiV1TodosByIdBody
	});
};

export const getPatchApiV1TodosByIdMutationOptions = <
	TError = PatchApiV1TodosById404,
	TContext = unknown
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof patchApiV1TodosById>>,
		TError,
		{ id: string; data: PatchApiV1TodosByIdBody },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof patchApiV1TodosById>>,
	TError,
	{ id: string; data: PatchApiV1TodosByIdBody },
	TContext
> => {
	const mutationKey = ['patchApiV1TodosById'];
	const { mutation: mutationOptions } = options
		? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof patchApiV1TodosById>>,
		{ id: string; data: PatchApiV1TodosByIdBody }
	> = (props) => {
		const { id, data } = props ?? {};

		return patchApiV1TodosById(id, data);
	};

	return { mutationFn, ...mutationOptions };
};

export type PatchApiV1TodosByIdMutationResult = NonNullable<
	Awaited<ReturnType<typeof patchApiV1TodosById>>
>;
export type PatchApiV1TodosByIdMutationBody = PatchApiV1TodosByIdBody;
export type PatchApiV1TodosByIdMutationError = PatchApiV1TodosById404;

export const createPatchApiV1TodosById = <TError = PatchApiV1TodosById404, TContext = unknown>(
	options?: {
		mutation?: CreateMutationOptions<
			Awaited<ReturnType<typeof patchApiV1TodosById>>,
			TError,
			{ id: string; data: PatchApiV1TodosByIdBody },
			TContext
		>;
	},
	queryClient?: QueryClient
): CreateMutationResult<
	Awaited<ReturnType<typeof patchApiV1TodosById>>,
	TError,
	{ id: string; data: PatchApiV1TodosByIdBody },
	TContext
> => {
	const mutationOptions = getPatchApiV1TodosByIdMutationOptions(options);

	return createMutation(mutationOptions, queryClient);
};

/**
 * Delete a todo by id
 */
export const deleteApiV1TodosById = (id: string) => {
	return todosCustomFetch<void>({
		url: `http://localhost:4001/api/v1/todos/${id}`,
		method: 'DELETE'
	});
};

export const getDeleteApiV1TodosByIdMutationOptions = <
	TError = DeleteApiV1TodosById404,
	TContext = unknown
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof deleteApiV1TodosById>>,
		TError,
		{ id: string },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof deleteApiV1TodosById>>,
	TError,
	{ id: string },
	TContext
> => {
	const mutationKey = ['deleteApiV1TodosById'];
	const { mutation: mutationOptions } = options
		? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof deleteApiV1TodosById>>,
		{ id: string }
	> = (props) => {
		const { id } = props ?? {};

		return deleteApiV1TodosById(id);
	};

	return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1TodosByIdMutationResult = NonNullable<
	Awaited<ReturnType<typeof deleteApiV1TodosById>>
>;

export type DeleteApiV1TodosByIdMutationError = DeleteApiV1TodosById404;

export const createDeleteApiV1TodosById = <TError = DeleteApiV1TodosById404, TContext = unknown>(
	options?: {
		mutation?: CreateMutationOptions<
			Awaited<ReturnType<typeof deleteApiV1TodosById>>,
			TError,
			{ id: string },
			TContext
		>;
	},
	queryClient?: QueryClient
): CreateMutationResult<
	Awaited<ReturnType<typeof deleteApiV1TodosById>>,
	TError,
	{ id: string },
	TContext
> => {
	const mutationOptions = getDeleteApiV1TodosByIdMutationOptions(options);

	return createMutation(mutationOptions, queryClient);
};
