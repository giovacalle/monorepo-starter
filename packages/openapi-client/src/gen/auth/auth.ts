/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Auth API
 * API for managing authentication
 * OpenAPI spec version: 1.0.0
 */
import { createQuery } from '@tanstack/svelte-query';
import type {
	CreateQueryOptions,
	CreateQueryResult,
	DataTag,
	QueryClient,
	QueryFunction,
	QueryKey
} from '@tanstack/svelte-query';

import type { GetApiV1Session204, GetApiV1SessionHeaders } from './auth.schemas';

import { authCustomFetch } from './auth-custom-fetch';

/**
 * Get current user session
 */
export const getApiV1Session = (headers: GetApiV1SessionHeaders, signal?: AbortSignal) => {
	return authCustomFetch<GetApiV1Session204>({
		url: 'http://localhost:4002/api/v1/session',
		method: 'GET',
		headers,
		signal
	});
};

export const getGetApiV1SessionQueryKey = () => {
	return ['http://localhost:4002/api/v1/session'] as const;
};

export const getGetApiV1SessionQueryOptions = <
	TData = Awaited<ReturnType<typeof getApiV1Session>>,
	TError = void
>(
	headers: GetApiV1SessionHeaders,
	options?: {
		query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof getApiV1Session>>, TError, TData>>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetApiV1SessionQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Session>>> = ({ signal }) =>
		getApiV1Session(headers, signal);

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof getApiV1Session>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiV1SessionQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1Session>>>;
export type GetApiV1SessionQueryError = void;

export function createGetApiV1Session<
	TData = Awaited<ReturnType<typeof getApiV1Session>>,
	TError = void
>(
	headers: GetApiV1SessionHeaders,
	options?: {
		query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof getApiV1Session>>, TError, TData>>;
	},
	queryClient?: QueryClient
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetApiV1SessionQueryOptions(headers, options);

	const query = createQuery(queryOptions, queryClient) as CreateQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}
