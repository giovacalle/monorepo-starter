/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Posts API
 * API for managing posts
 * OpenAPI spec version: 1.0.0
 */
import { createMutation, createQuery } from '@tanstack/svelte-query';
import type {
	CreateMutationOptions,
	CreateMutationResult,
	CreateQueryOptions,
	CreateQueryResult,
	DataTag,
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey
} from '@tanstack/svelte-query';

import type {
	DeleteApiV1PostsById401,
	DeleteApiV1PostsById404,
	DeleteApiV1PostsByIdHeaders,
	DeleteApiV1PostsVotesByPostId401,
	DeleteApiV1PostsVotesByPostId404,
	DeleteApiV1PostsVotesByPostIdHeaders,
	GetApiV1Posts200Item,
	GetApiV1Posts400,
	GetApiV1Posts404,
	GetApiV1PostsById200,
	GetApiV1PostsById400,
	GetApiV1PostsById404,
	GetApiV1PostsByIdHeaders,
	GetApiV1PostsHeaders,
	GetApiV1PostsParams,
	PatchApiV1PostsById200,
	PatchApiV1PostsById400,
	PatchApiV1PostsById401,
	PatchApiV1PostsById404,
	PatchApiV1PostsByIdBody,
	PatchApiV1PostsByIdHeaders,
	PostApiV1Posts201,
	PostApiV1Posts400,
	PostApiV1Posts401,
	PostApiV1PostsBody,
	PostApiV1PostsHeaders,
	PostApiV1PostsVotes201,
	PostApiV1PostsVotes400,
	PostApiV1PostsVotes401,
	PostApiV1PostsVotes404,
	PostApiV1PostsVotesBody,
	PostApiV1PostsVotesHeaders
} from './posts.schemas';

import { customFetch } from './custom-fetch';

/**
 * Get all posts
 */
export const getApiV1Posts = (
	params?: GetApiV1PostsParams,
	headers?: GetApiV1PostsHeaders,
	signal?: AbortSignal
) => {
	return customFetch<GetApiV1Posts200Item[]>({
		url: 'http://localhost:4001/api/v1/posts',
		method: 'GET',
		headers,
		params,
		signal
	});
};

export const getGetApiV1PostsQueryKey = (params?: GetApiV1PostsParams) => {
	return ['http://localhost:4001/api/v1/posts', ...(params ? [params] : [])] as const;
};

export const getGetApiV1PostsQueryOptions = <
	TData = Awaited<ReturnType<typeof getApiV1Posts>>,
	TError = GetApiV1Posts400 | GetApiV1Posts404
>(
	params?: GetApiV1PostsParams,
	headers?: GetApiV1PostsHeaders,
	options?: {
		query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof getApiV1Posts>>, TError, TData>>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetApiV1PostsQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Posts>>> = ({ signal }) =>
		getApiV1Posts(params, headers, signal);

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof getApiV1Posts>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiV1PostsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1Posts>>>;
export type GetApiV1PostsQueryError = GetApiV1Posts400 | GetApiV1Posts404;

export function createGetApiV1Posts<
	TData = Awaited<ReturnType<typeof getApiV1Posts>>,
	TError = GetApiV1Posts400 | GetApiV1Posts404
>(
	params?: GetApiV1PostsParams,
	headers?: GetApiV1PostsHeaders,
	options?: {
		query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof getApiV1Posts>>, TError, TData>>;
	},
	queryClient?: QueryClient
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetApiV1PostsQueryOptions(params, headers, options);

	const query = createQuery(queryOptions, queryClient) as CreateQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * Create a new post
 */
export const postApiV1Posts = (
	postApiV1PostsBody: PostApiV1PostsBody,
	headers: PostApiV1PostsHeaders,
	signal?: AbortSignal
) => {
	return customFetch<PostApiV1Posts201>({
		url: 'http://localhost:4001/api/v1/posts',
		method: 'POST',
		headers: { 'Content-Type': 'application/json', ...headers },
		data: postApiV1PostsBody,
		signal
	});
};

export const getPostApiV1PostsMutationOptions = <
	TError = PostApiV1Posts400 | PostApiV1Posts401,
	TContext = unknown
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof postApiV1Posts>>,
		TError,
		{ data: PostApiV1PostsBody; headers: PostApiV1PostsHeaders },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof postApiV1Posts>>,
	TError,
	{ data: PostApiV1PostsBody; headers: PostApiV1PostsHeaders },
	TContext
> => {
	const mutationKey = ['postApiV1Posts'];
	const { mutation: mutationOptions } = options
		? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof postApiV1Posts>>,
		{ data: PostApiV1PostsBody; headers: PostApiV1PostsHeaders }
	> = (props) => {
		const { data, headers } = props ?? {};

		return postApiV1Posts(data, headers);
	};

	return { mutationFn, ...mutationOptions };
};

export type PostApiV1PostsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiV1Posts>>>;
export type PostApiV1PostsMutationBody = PostApiV1PostsBody;
export type PostApiV1PostsMutationError = PostApiV1Posts400 | PostApiV1Posts401;

export const createPostApiV1Posts = <
	TError = PostApiV1Posts400 | PostApiV1Posts401,
	TContext = unknown
>(
	options?: {
		mutation?: CreateMutationOptions<
			Awaited<ReturnType<typeof postApiV1Posts>>,
			TError,
			{ data: PostApiV1PostsBody; headers: PostApiV1PostsHeaders },
			TContext
		>;
	},
	queryClient?: QueryClient
): CreateMutationResult<
	Awaited<ReturnType<typeof postApiV1Posts>>,
	TError,
	{ data: PostApiV1PostsBody; headers: PostApiV1PostsHeaders },
	TContext
> => {
	const mutationOptions = getPostApiV1PostsMutationOptions(options);

	return createMutation(mutationOptions, queryClient);
};

/**
 * Get a post by id
 */
export const getApiV1PostsById = (
	id: number,
	headers?: GetApiV1PostsByIdHeaders,
	signal?: AbortSignal
) => {
	return customFetch<GetApiV1PostsById200>({
		url: `http://localhost:4001/api/v1/posts/${id}`,
		method: 'GET',
		headers,
		signal
	});
};

export const getGetApiV1PostsByIdQueryKey = (id: number) => {
	return [`http://localhost:4001/api/v1/posts/${id}`] as const;
};

export const getGetApiV1PostsByIdQueryOptions = <
	TData = Awaited<ReturnType<typeof getApiV1PostsById>>,
	TError = GetApiV1PostsById400 | GetApiV1PostsById404
>(
	id: number,
	headers?: GetApiV1PostsByIdHeaders,
	options?: {
		query?: Partial<
			CreateQueryOptions<Awaited<ReturnType<typeof getApiV1PostsById>>, TError, TData>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetApiV1PostsByIdQueryKey(id);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1PostsById>>> = ({ signal }) =>
		getApiV1PostsById(id, headers, signal);

	return { queryKey, queryFn, enabled: !!id, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof getApiV1PostsById>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiV1PostsByIdQueryResult = NonNullable<
	Awaited<ReturnType<typeof getApiV1PostsById>>
>;
export type GetApiV1PostsByIdQueryError = GetApiV1PostsById400 | GetApiV1PostsById404;

export function createGetApiV1PostsById<
	TData = Awaited<ReturnType<typeof getApiV1PostsById>>,
	TError = GetApiV1PostsById400 | GetApiV1PostsById404
>(
	id: number,
	headers?: GetApiV1PostsByIdHeaders,
	options?: {
		query?: Partial<
			CreateQueryOptions<Awaited<ReturnType<typeof getApiV1PostsById>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetApiV1PostsByIdQueryOptions(id, headers, options);

	const query = createQuery(queryOptions, queryClient) as CreateQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * Update a post by id
 */
export const patchApiV1PostsById = (
	id: number,
	patchApiV1PostsByIdBody: PatchApiV1PostsByIdBody,
	headers: PatchApiV1PostsByIdHeaders
) => {
	return customFetch<PatchApiV1PostsById200>({
		url: `http://localhost:4001/api/v1/posts/${id}`,
		method: 'PATCH',
		headers: { 'Content-Type': 'application/json', ...headers },
		data: patchApiV1PostsByIdBody
	});
};

export const getPatchApiV1PostsByIdMutationOptions = <
	TError = PatchApiV1PostsById400 | PatchApiV1PostsById401 | PatchApiV1PostsById404,
	TContext = unknown
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof patchApiV1PostsById>>,
		TError,
		{ id: number; data: PatchApiV1PostsByIdBody; headers: PatchApiV1PostsByIdHeaders },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof patchApiV1PostsById>>,
	TError,
	{ id: number; data: PatchApiV1PostsByIdBody; headers: PatchApiV1PostsByIdHeaders },
	TContext
> => {
	const mutationKey = ['patchApiV1PostsById'];
	const { mutation: mutationOptions } = options
		? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof patchApiV1PostsById>>,
		{ id: number; data: PatchApiV1PostsByIdBody; headers: PatchApiV1PostsByIdHeaders }
	> = (props) => {
		const { id, data, headers } = props ?? {};

		return patchApiV1PostsById(id, data, headers);
	};

	return { mutationFn, ...mutationOptions };
};

export type PatchApiV1PostsByIdMutationResult = NonNullable<
	Awaited<ReturnType<typeof patchApiV1PostsById>>
>;
export type PatchApiV1PostsByIdMutationBody = PatchApiV1PostsByIdBody;
export type PatchApiV1PostsByIdMutationError =
	| PatchApiV1PostsById400
	| PatchApiV1PostsById401
	| PatchApiV1PostsById404;

export const createPatchApiV1PostsById = <
	TError = PatchApiV1PostsById400 | PatchApiV1PostsById401 | PatchApiV1PostsById404,
	TContext = unknown
>(
	options?: {
		mutation?: CreateMutationOptions<
			Awaited<ReturnType<typeof patchApiV1PostsById>>,
			TError,
			{ id: number; data: PatchApiV1PostsByIdBody; headers: PatchApiV1PostsByIdHeaders },
			TContext
		>;
	},
	queryClient?: QueryClient
): CreateMutationResult<
	Awaited<ReturnType<typeof patchApiV1PostsById>>,
	TError,
	{ id: number; data: PatchApiV1PostsByIdBody; headers: PatchApiV1PostsByIdHeaders },
	TContext
> => {
	const mutationOptions = getPatchApiV1PostsByIdMutationOptions(options);

	return createMutation(mutationOptions, queryClient);
};

/**
 * Delete a post by id
 */
export const deleteApiV1PostsById = (id: number, headers: DeleteApiV1PostsByIdHeaders) => {
	return customFetch<void>({
		url: `http://localhost:4001/api/v1/posts/${id}`,
		method: 'DELETE',
		headers
	});
};

export const getDeleteApiV1PostsByIdMutationOptions = <
	TError = DeleteApiV1PostsById401 | DeleteApiV1PostsById404,
	TContext = unknown
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof deleteApiV1PostsById>>,
		TError,
		{ id: number; headers: DeleteApiV1PostsByIdHeaders },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof deleteApiV1PostsById>>,
	TError,
	{ id: number; headers: DeleteApiV1PostsByIdHeaders },
	TContext
> => {
	const mutationKey = ['deleteApiV1PostsById'];
	const { mutation: mutationOptions } = options
		? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof deleteApiV1PostsById>>,
		{ id: number; headers: DeleteApiV1PostsByIdHeaders }
	> = (props) => {
		const { id, headers } = props ?? {};

		return deleteApiV1PostsById(id, headers);
	};

	return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1PostsByIdMutationResult = NonNullable<
	Awaited<ReturnType<typeof deleteApiV1PostsById>>
>;

export type DeleteApiV1PostsByIdMutationError = DeleteApiV1PostsById401 | DeleteApiV1PostsById404;

export const createDeleteApiV1PostsById = <
	TError = DeleteApiV1PostsById401 | DeleteApiV1PostsById404,
	TContext = unknown
>(
	options?: {
		mutation?: CreateMutationOptions<
			Awaited<ReturnType<typeof deleteApiV1PostsById>>,
			TError,
			{ id: number; headers: DeleteApiV1PostsByIdHeaders },
			TContext
		>;
	},
	queryClient?: QueryClient
): CreateMutationResult<
	Awaited<ReturnType<typeof deleteApiV1PostsById>>,
	TError,
	{ id: number; headers: DeleteApiV1PostsByIdHeaders },
	TContext
> => {
	const mutationOptions = getDeleteApiV1PostsByIdMutationOptions(options);

	return createMutation(mutationOptions, queryClient);
};

/**
 * Vote for a post
 */
export const postApiV1PostsVotes = (
	postApiV1PostsVotesBody: PostApiV1PostsVotesBody,
	headers: PostApiV1PostsVotesHeaders,
	signal?: AbortSignal
) => {
	return customFetch<PostApiV1PostsVotes201>({
		url: 'http://localhost:4001/api/v1/posts_votes',
		method: 'POST',
		headers: { 'Content-Type': 'application/json', ...headers },
		data: postApiV1PostsVotesBody,
		signal
	});
};

export const getPostApiV1PostsVotesMutationOptions = <
	TError = PostApiV1PostsVotes400 | PostApiV1PostsVotes401 | PostApiV1PostsVotes404,
	TContext = unknown
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof postApiV1PostsVotes>>,
		TError,
		{ data: PostApiV1PostsVotesBody; headers: PostApiV1PostsVotesHeaders },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof postApiV1PostsVotes>>,
	TError,
	{ data: PostApiV1PostsVotesBody; headers: PostApiV1PostsVotesHeaders },
	TContext
> => {
	const mutationKey = ['postApiV1PostsVotes'];
	const { mutation: mutationOptions } = options
		? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof postApiV1PostsVotes>>,
		{ data: PostApiV1PostsVotesBody; headers: PostApiV1PostsVotesHeaders }
	> = (props) => {
		const { data, headers } = props ?? {};

		return postApiV1PostsVotes(data, headers);
	};

	return { mutationFn, ...mutationOptions };
};

export type PostApiV1PostsVotesMutationResult = NonNullable<
	Awaited<ReturnType<typeof postApiV1PostsVotes>>
>;
export type PostApiV1PostsVotesMutationBody = PostApiV1PostsVotesBody;
export type PostApiV1PostsVotesMutationError =
	| PostApiV1PostsVotes400
	| PostApiV1PostsVotes401
	| PostApiV1PostsVotes404;

export const createPostApiV1PostsVotes = <
	TError = PostApiV1PostsVotes400 | PostApiV1PostsVotes401 | PostApiV1PostsVotes404,
	TContext = unknown
>(
	options?: {
		mutation?: CreateMutationOptions<
			Awaited<ReturnType<typeof postApiV1PostsVotes>>,
			TError,
			{ data: PostApiV1PostsVotesBody; headers: PostApiV1PostsVotesHeaders },
			TContext
		>;
	},
	queryClient?: QueryClient
): CreateMutationResult<
	Awaited<ReturnType<typeof postApiV1PostsVotes>>,
	TError,
	{ data: PostApiV1PostsVotesBody; headers: PostApiV1PostsVotesHeaders },
	TContext
> => {
	const mutationOptions = getPostApiV1PostsVotesMutationOptions(options);

	return createMutation(mutationOptions, queryClient);
};

/**
 * Remove vote from a post
 */
export const deleteApiV1PostsVotesByPostId = (
	postId: number,
	headers: DeleteApiV1PostsVotesByPostIdHeaders
) => {
	return customFetch<void>({
		url: `http://localhost:4001/api/v1/posts_votes/${postId}`,
		method: 'DELETE',
		headers
	});
};

export const getDeleteApiV1PostsVotesByPostIdMutationOptions = <
	TError = DeleteApiV1PostsVotesByPostId401 | DeleteApiV1PostsVotesByPostId404,
	TContext = unknown
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof deleteApiV1PostsVotesByPostId>>,
		TError,
		{ postId: number; headers: DeleteApiV1PostsVotesByPostIdHeaders },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof deleteApiV1PostsVotesByPostId>>,
	TError,
	{ postId: number; headers: DeleteApiV1PostsVotesByPostIdHeaders },
	TContext
> => {
	const mutationKey = ['deleteApiV1PostsVotesByPostId'];
	const { mutation: mutationOptions } = options
		? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof deleteApiV1PostsVotesByPostId>>,
		{ postId: number; headers: DeleteApiV1PostsVotesByPostIdHeaders }
	> = (props) => {
		const { postId, headers } = props ?? {};

		return deleteApiV1PostsVotesByPostId(postId, headers);
	};

	return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1PostsVotesByPostIdMutationResult = NonNullable<
	Awaited<ReturnType<typeof deleteApiV1PostsVotesByPostId>>
>;

export type DeleteApiV1PostsVotesByPostIdMutationError =
	| DeleteApiV1PostsVotesByPostId401
	| DeleteApiV1PostsVotesByPostId404;

export const createDeleteApiV1PostsVotesByPostId = <
	TError = DeleteApiV1PostsVotesByPostId401 | DeleteApiV1PostsVotesByPostId404,
	TContext = unknown
>(
	options?: {
		mutation?: CreateMutationOptions<
			Awaited<ReturnType<typeof deleteApiV1PostsVotesByPostId>>,
			TError,
			{ postId: number; headers: DeleteApiV1PostsVotesByPostIdHeaders },
			TContext
		>;
	},
	queryClient?: QueryClient
): CreateMutationResult<
	Awaited<ReturnType<typeof deleteApiV1PostsVotesByPostId>>,
	TError,
	{ postId: number; headers: DeleteApiV1PostsVotesByPostIdHeaders },
	TContext
> => {
	const mutationOptions = getDeleteApiV1PostsVotesByPostIdMutationOptions(options);

	return createMutation(mutationOptions, queryClient);
};
