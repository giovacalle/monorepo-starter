/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Posts API
 * API for managing posts
 * OpenAPI spec version: 1.0.0
 */
export type GetApiV1PostsParams = {
	page?: number;
	limit?: number;
};

export type GetApiV1PostsHeaders = {
	authorization?: string;
};

export type GetApiV1Posts200ItemAuthor = {
	username: string;
	image?: string;
};

export type GetApiV1Posts200ItemUserVote = number | null;

export type GetApiV1Posts200Item = {
	id: number;
	title: string;
	content: string;
	author: GetApiV1Posts200ItemAuthor;
	createdAt: string;
	upvotesCount: number;
	downvotesCount: number;
	userVote?: GetApiV1Posts200ItemUserVote;
};

export type GetApiV1Posts400 = {
	message: string;
	errors: unknown[];
};

export type GetApiV1Posts404 = {
	message: string;
};

export type PostApiV1PostsHeaders = {
	authorization: string;
};

export type PostApiV1PostsBody = {
	title: string;
	content: string;
};

export type PostApiV1Posts201 = {
	id: number;
};

export type PostApiV1Posts400 = {
	message: string;
	errors: unknown[];
};

export type PostApiV1Posts401 = {
	message: string;
};

export type GetApiV1PostsByIdHeaders = {
	authorization?: string;
};

export type GetApiV1PostsById200Author = {
	username: string;
	image?: string;
};

export type GetApiV1PostsById200UserVote = number | null;

export type GetApiV1PostsById200 = {
	id: number;
	title: string;
	content: string;
	author: GetApiV1PostsById200Author;
	createdAt: string;
	upvotesCount: number;
	downvotesCount: number;
	userVote?: GetApiV1PostsById200UserVote;
};

export type GetApiV1PostsById400 = {
	message: string;
	errors: unknown[];
};

export type GetApiV1PostsById404 = {
	message: string;
};

export type PatchApiV1PostsByIdHeaders = {
	authorization: string;
};

export type PatchApiV1PostsByIdBody = {
	title: string;
	content: string;
};

export type PatchApiV1PostsById200 = {
	updatedAt: string;
};

export type PatchApiV1PostsById400 = {
	message: string;
	errors: unknown[];
};

export type PatchApiV1PostsById401 = {
	message: string;
};

export type PatchApiV1PostsById404 = {
	message: string;
};

export type DeleteApiV1PostsByIdHeaders = {
	authorization: string;
};

export type DeleteApiV1PostsById401 = {
	message: string;
};

export type DeleteApiV1PostsById404 = {
	message: string;
};

export type PostApiV1PostsVotesHeaders = {
	authorization: string;
};

export type PostApiV1PostsVotesBodyVote =
	(typeof PostApiV1PostsVotesBodyVote)[keyof typeof PostApiV1PostsVotesBodyVote];

 
export const PostApiV1PostsVotesBodyVote = {
	upvote: 'upvote',
	downvote: 'downvote'
} as const;

export type PostApiV1PostsVotesBody = {
	/** @minimum 1 */
	postId: number;
	vote: PostApiV1PostsVotesBodyVote;
};

export type PostApiV1PostsVotes201 = {
	updatedAt: string;
};

export type PostApiV1PostsVotes400 = {
	message: string;
	errors: unknown[];
};

export type PostApiV1PostsVotes401 = {
	message: string;
};

export type PostApiV1PostsVotes404 = {
	message: string;
};

export type DeleteApiV1PostsVotesByPostIdHeaders = {
	authorization: string;
};

export type DeleteApiV1PostsVotesByPostId401 = {
	message: string;
};

export type DeleteApiV1PostsVotesByPostId404 = {
	message: string;
};
